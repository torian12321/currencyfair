{"version":3,"sources":["components/ui/FormComponents/Button/Button.module.scss","components/ui/Modal/Modal.module.scss","Header/Header.module.scss","components/ui/Spinner/Spinner.module.scss","logo.svg","components/hooks/useEventListener.ts","components/hooks/useWindowScrollPosition.ts","Header/Header.tsx","components/ui/Modal/Modal.tsx","components/hooks/useKeyPress.ts","components/ui/Spinner/Spinner.tsx","components/ui/FormComponents/Button/Button.tsx","App.tsx","components/ui/Modal/useModal.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","useEventListener","eventName","handler","element","window","savedHandler","useRef","useEffect","current","addEventListener","eventListener","event","removeEventListener","_w","getPosition","x","pageXOffset","y","pageYOffset","Header","positionY","useState","position","setPosition","positionX","useWindowScrollPosition","isSmall","className","classNames","styles","header","header__small","Modal","props","children","onDismiss","escIsPressed","targetKey","keyPressed","setKeyPressed","key","keyCode","useKeyPress","document","body","classList","add","body_hasModal","remove","closeModal","ReactDOM","createPortal","modal_BG","modal","onClick","Spinner","size","spinner","viewBox","cx","cy","r","Button","caption","disabled","loading","form","outline","alt","type","isClickable","btn","btn__outline","btn__hasCaption","btn__isLoading","btn__disabled","aria-label","btn_spinner","Group","btnList","App","isVisible","setIsVisible","hiddeModal","showModal","useModal","src","logo","href","target","rel","Boolean","location","hostname","match","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6ebf8311.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__2P4zC\",\"btn_spinner\":\"Button_btn_spinner__2QqSo\",\"btn__outline\":\"Button_btn__outline__2NrRa\",\"btn__disabled\":\"Button_btn__disabled__9f1yp\",\"btnList\":\"Button_btnList__153Y3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body_hasModal\":\"Modal_body_hasModal__2bu0B\",\"modal\":\"Modal_modal__1z7i3\",\"fadeIn\":\"Modal_fadeIn__1hwE8\",\"modal_BG\":\"Modal_modal_BG__-kWIB\",\"fadeI_BG\":\"Modal_fadeI_BG__1xUQS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2GQ2w\",\"header__small\":\"Header_header__small__2M3-A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinner\":\"Spinner_spinner__1Yt6Y\",\"rotate\":\"Spinner_rotate__1_OR7\",\"dash\":\"Spinner_dash__17UK9\",\"spinner__lg\":\"Spinner_spinner__lg__32xr2\",\"spinner__xs\":\"Spinner_spinner__xs__TLbf4\",\"spinner__sm\":\"Spinner_spinner__sm__2lIA6\",\"spinner__xl\":\"Spinner_spinner__xl__7ZaNf\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { useRef, useEffect } from \"react\";\r\n\r\nconst useEventListener = (\r\n  eventName: string,\r\n  handler: any,\r\n  element: any = window\r\n) => {\r\n  // Create a ref that stores handler\r\n  const savedHandler: any = useRef();\r\n\r\n  // Update ref.current value if handler changes.\r\n  // This allows our effect below to always get latest handler ...\r\n  // ... without us needing to pass it in effect deps array ...\r\n  // ... and potentially cause effect to re-run every render.\r\n  useEffect(() => {\r\n    savedHandler.current = handler;\r\n  }, [handler]);\r\n\r\n  useEffect(() => {\r\n    // Make sure element supports addEventListener\r\n    const isSupported = element && element.addEventListener;\r\n    if (!isSupported) return;\r\n\r\n    // Create event listener that calls handler function stored in ref\r\n    const eventListener = (event: any) => savedHandler.current(event);\r\n\r\n    // Add event listener\r\n    element.addEventListener(eventName, eventListener);\r\n\r\n    // Remove event listener on cleanup\r\n    return () => {\r\n      element.removeEventListener(eventName, eventListener);\r\n    };\r\n  }, [eventName, element]); // Re-run if eventName or element changes\r\n};\r\n\r\nexport { useEventListener };\r\n","import { useState /*, useEffect*/ } from \"react\";\r\nimport { useEventListener } from \"./useEventListener\";\r\n\r\nconst _w = window;\r\nconst getPosition = () => ({\r\n  x: _w.pageXOffset,\r\n  y: _w.pageYOffset\r\n});\r\n\r\nconst useWindowScrollPosition = () => {\r\n  const [position, setPosition] = useState(getPosition());\r\n\r\n  const handleScroll = () => {\r\n    setPosition(getPosition());\r\n  };\r\n\r\n  useEventListener(\"scroll\", handleScroll, window);\r\n\r\n  return {\r\n    position,\r\n    positionX: position.x,\r\n    positionY: position.y\r\n  };\r\n};\r\n\r\nexport { useWindowScrollPosition };\r\n","import React from \"react\";\r\nimport classNames from \"classnames\";\r\nimport { useWindowScrollPosition } from \"components/hooks\";\r\n// import logo from \"./logo.svg\";\r\nimport styles from \"./Header.module.scss\";\r\n\r\nconst Header: React.FC = () => {\r\n  const { positionY } = useWindowScrollPosition();\r\n  const isSmall = positionY > 100;\r\n\r\n  return (\r\n    <header\r\n      className={classNames(styles.header, isSmall && styles.header__small)}\r\n    >\r\n      The logo goes here - {positionY}\r\n    </header>\r\n  );\r\n};\r\n\r\nexport { Header };\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { useKeyPress } from \"components/hooks\";\r\nimport { IModal } from \"./Modal.interfaces\";\r\nimport styles from \"./Modal.module.scss\";\r\n\r\nconst KEY_ESC = 27;\r\n\r\nconst Modal = (props: IModal) => {\r\n  const { children, onDismiss = () => {} } = props;\r\n  const escIsPressed = useKeyPress(KEY_ESC);\r\n\r\n  useEffect(() => {\r\n    // When on screen, block the page scroll\r\n    document.body.classList.add(styles.body_hasModal);\r\n\r\n    return () => {\r\n      document.body.classList.remove(styles.body_hasModal);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Remove the Modal from the screen when ESC is pressed\r\n    escIsPressed && closeModal();\r\n  }, [escIsPressed]);\r\n\r\n  const closeModal = () => {\r\n    onDismiss();\r\n  };\r\n\r\n  return ReactDOM.createPortal(\r\n    <>\r\n      <div className={styles.modal_BG} />\r\n      <div className={styles.modal}>\r\n        <div onClick={closeModal}>close me</div>\r\n        {children}\r\n      </div>\r\n    </>,\r\n    document.body\r\n  );\r\n};\r\n\r\nexport { Modal };\r\n","import { useState } from \"react\";\r\nimport { useEventListener } from \"components/hooks\";\r\n\r\nconst useKeyPress = (targetKey: string | number) => {\r\n  // State for keeping track of whether key is pressed\r\n  const [keyPressed, setKeyPressed] = useState(false);\r\n\r\n  // If pressed key is our target key then set to true\r\n  const downHandler = ({ key, keyCode }: any) => {\r\n    if (key === targetKey || keyCode === targetKey) {\r\n      setKeyPressed(true);\r\n    }\r\n  };\r\n\r\n  // If released key is our target key then set to false\r\n  const upHandler = ({ key, keyCode }: any) => {\r\n    if (key === targetKey || keyCode === targetKey) {\r\n      setKeyPressed(false);\r\n    }\r\n  };\r\n\r\n  // Add event listeners\r\n  useEventListener(\"keydown\", downHandler, window);\r\n  useEventListener(\"keyup\", upHandler, window);\r\n\r\n  return keyPressed;\r\n};\r\n\r\nexport { useKeyPress };\r\n","import React from \"react\";\nimport classNames from 'classnames';\nimport { ISpinner } from \"./Spinner.interfaces\";\nimport styles from './Spinner.module.scss';\n\nconst Spinner = (props: ISpinner) => {\n  const { className, size } = props;\n\n  return (\n    <div className={classNames(\n      styles.spinner,\n      styles[`spinner__${size}`],\n      className\n    )}>\n      <svg viewBox=\"0 0 66 66\">\n        <circle cx=\"33\" cy=\"33\" r=\"30\" />\n      </svg>\n    </div>\n  );\n};\n\nexport { Spinner };\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport { Spinner } from \"components/ui\";\nimport { IButton, IButtonGroup } from \"./Button.interfaces\";\nimport styles from \"./Button.module.scss\";\n\nconst Button = (props: IButton) => {\n  const {\n    caption,\n    className,\n    disabled = false,\n    loading = false,\n    form,\n    onClick,\n    outline = false,\n    alt = caption,\n    type = \"button\"\n  } = props;\n\n  const isClickable = !disabled && !loading;\n\n  const onClickHandler = () => {\n    if (isClickable) {\n      onClick();\n    }\n  };\n\n  return (\n    <button\n      className={classNames(\n        styles.btn,\n        outline && styles.btn__outline,\n        caption && styles.btn__hasCaption,\n        loading && styles.btn__isLoading,\n        disabled && styles.btn__disabled,\n        className\n      )}\n      type={type}\n      aria-label={alt}\n      form={form}\n      onClick={onClick && onClickHandler}\n      disabled={disabled}\n    >\n      {caption}\n      {loading && <Spinner className={styles.btn_spinner} />}\n    </button>\n  );\n};\n\nconst ButtonGroup = ({ children, className }: IButtonGroup) => (\n  <div className={classNames(styles.btnList, className)}>{children}</div>\n);\n\nButton.Group = ButtonGroup;\n\nexport { Button };\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Header } from \"./Header\";\nimport { Button, Spinner, useModal } from \"components/ui\";\n\nconst App: React.FC = () => {\n  const { Modal, showModal } = useModal();\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Modal>I have some custom content</Modal>\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Button.Group>\n          <Button caption=\"Basic\" onClick={showModal} />\n          <Button caption=\"Outline\" outline />\n        </Button.Group>\n\n        <Button caption=\"Disabled\" disabled />\n        <Button caption=\"Loading\" loading />\n        <Spinner />\n        <Spinner size=\"xs\" />\n        <Spinner size=\"sm\" />\n        <Spinner size=\"lg\" />\n        <Spinner size=\"xl\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","import React, { useState } from \"react\";\r\nimport { Modal } from \"./Modal\";\r\nimport { IModal } from \"./Modal.interfaces\";\r\n\r\n/**\r\n * Hook returning <Modal /> component and its controllers\r\n *\r\n */\r\n\r\nconst useModal = () => {\r\n  const [isVisible, setIsVisible] = useState(false);\r\n  const hiddeModal = () => setIsVisible(false);\r\n  const showModal = () => setIsVisible(true);\r\n\r\n  return {\r\n    Modal: (props: IModal) =>\r\n      isVisible ? <Modal onDismiss={hiddeModal} {...props} /> : null,\r\n    showModal,\r\n    hiddeModal\r\n  };\r\n};\r\n\r\nexport { useModal };\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}