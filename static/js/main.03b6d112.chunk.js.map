{"version":3,"sources":["components/FormComponents/Button/Button.module.scss","components/Spinner/Spinner.module.scss","logo.svg","components/Spinner/Spinner.tsx","components/FormComponents/Button/Button.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Spinner","props","className","size","classNames","styles","spinner","viewBox","cx","cy","r","Button","caption","disabled","loading","form","onClick","outline","alt","type","isClickable","btn","btn__outline","btn__hasCaption","btn__isLoading","btn__disabled","aria-label","btn_spinner","App","src","logo","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kGACAA,EAAOC,QAAU,CAAC,IAAM,oBAAoB,YAAc,4BAA4B,cAAgB,gC,iBCAtGD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,QAAU,yBAAyB,KAAO,sBAAsB,YAAc,6BAA6B,YAAc,6BAA6B,YAAc,6BAA6B,YAAc,+B,kBCDpQD,EAAOC,QAAU,IAA0B,kC,iNCKrCC,EAAU,SAACC,GAAqB,IAC5BC,EAAoBD,EAApBC,UAAWC,EAASF,EAATE,KAEnB,OACE,yBAAKD,UAAWE,IACdC,IAAOC,QACPD,IAAO,YAAD,OAAaF,IACnBD,IAEA,yBAAKK,QAAQ,aACX,4BAAQC,GAAG,KAAKC,GAAG,KAAKC,EAAE,U,gBCR5BC,EAAS,SAACV,GAAoB,IAEhCW,EASEX,EATFW,QACAV,EAQED,EARFC,UAH+B,EAW7BD,EAPFY,gBAJ+B,WAW7BZ,EANFa,eAL+B,SAM/BC,EAKEd,EALFc,KACAC,EAIEf,EAJFe,QAP+B,EAW7Bf,EAHFgB,eAR+B,WAW7BhB,EAFFiB,WAT+B,MASzBN,EATyB,IAW7BX,EADFkB,YAV+B,MAUxB,SAVwB,EAa3BC,GAAeP,IAAaC,EAQlC,OAAO,4BACLZ,UAAWE,IACTC,IAAOgB,IACPJ,GAAWZ,IAAOiB,aAClBV,GAAWP,IAAOkB,gBAClBT,GAAWT,IAAOmB,eAClBX,GAAYR,IAAOoB,cACnBvB,GAEFiB,KAAMA,EACNO,aAAYR,EACZH,KAAMA,EACNC,QAASA,GAlBY,WACjBI,GACFJ,KAiBFH,SAAUA,GAETD,EACAE,GAAW,kBAAC,EAAD,CAASZ,UAAWG,IAAOsB,gBCT5BC,EA9BO,WACpB,OACE,yBAAK1B,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAK2B,IAAKC,IAAM5B,UAAU,WAAWgB,IAAI,SACzC,kBAAC,EAAD,CAAQN,QAAQ,UAChB,kBAAC,EAAD,CAAQA,QAAQ,UAAUK,SAAO,IACjC,kBAAC,EAAD,CAAQL,QAAQ,WAAWC,UAAQ,IACnC,kBAAC,EAAD,CAAQD,QAAQ,UAAUE,SAAO,IACjC,kBAAC,EAAD,MACA,kBAAC,EAAD,CAASX,KAAK,OACd,kBAAC,EAAD,CAASA,KAAK,OACd,kBAAC,EAAD,CAASA,KAAK,OACd,kBAAC,EAAD,CAASA,KAAK,OACd,mCACO,6CADP,wBAGA,uBACED,UAAU,WACV6B,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,kBCVYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.03b6d112.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__uiRVQ\",\"btn_spinner\":\"Button_btn_spinner__2OePY\",\"btn__disabled\":\"Button_btn__disabled__3X16s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinner\":\"Spinner_spinner__WlXqy\",\"rotator\":\"Spinner_rotator__2r7Zr\",\"dash\":\"Spinner_dash__2FxYX\",\"spinner__lg\":\"Spinner_spinner__lg__1bS0M\",\"spinner__xs\":\"Spinner_spinner__xs__2xojH\",\"spinner__sm\":\"Spinner_spinner__sm__1FcS0\",\"spinner__xl\":\"Spinner_spinner__xl__1P2QF\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport classNames from 'classnames';\nimport { ISpinner } from \"./Spinner.interfaces\";\nimport styles from './Spinner.module.scss';\n\nconst Spinner = (props: ISpinner) => {\n  const { className, size } = props;\n\n  return (\n    <div className={classNames(\n      styles.spinner,\n      styles[`spinner__${size}`],\n      className\n    )}>\n      <svg viewBox=\"0 0 66 66\">\n        <circle cx=\"33\" cy=\"33\" r=\"30\" />\n      </svg>\n    </div>\n  );\n};\n\nexport { Spinner };\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Spinner } from 'components';\n// import { Icon, Text } from 'ui';\nimport { IButton } from './Button.interfaces';\nimport styles from './Button.module.scss';\n\nconst Button = (props: IButton) => {\n  const {\n    caption,\n    className,\n    disabled = false,\n    loading = false,\n    form,\n    onClick,\n    outline = false,\n    alt = caption,\n    type = 'button'\n  } = props;\n\n  const isClickable = !disabled && !loading;\n\n  const onClickHandler = () => {\n    if (isClickable) {\n      onClick();\n    }\n  }\n\n  return <button\n    className={classNames(\n      styles.btn,\n      outline && styles.btn__outline,\n      caption && styles.btn__hasCaption,\n      loading && styles.btn__isLoading,\n      disabled && styles.btn__disabled,\n      className\n    )}\n    type={type}\n    aria-label={alt}\n    form={form}\n    onClick={onClick && onClickHandler}\n    disabled={disabled}\n  >\n    {caption}\n    {loading && <Spinner className={styles.btn_spinner} />}\n  </button>\n}\n\nexport { Button }","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Button, Spinner } from 'components';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Button caption='Basic' />\n        <Button caption='Outline' outline />\n        <Button caption='Disabled' disabled />\n        <Button caption='Loading' loading />\n        <Spinner />\n        <Spinner size='xs' />\n        <Spinner size='sm' />\n        <Spinner size='lg' />\n        <Spinner size='xl' />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}