{"version":3,"sources":["components/Spinner/Spinner.module.scss","components/FormComponents/Button/Button.module.scss","logo.svg","components/Spinner/Spinner.tsx","components/FormComponents/Button/Button.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Spinner","props","className","size","classNames","styles","spinner","viewBox","cx","cy","r","Button","caption","color","disabled","form","onClick","outline","alt","type","btn","btn__disabled","aria-label","App","src","logo","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,QAAU,yBAAyB,KAAO,sBAAsB,YAAc,6BAA6B,YAAc,6BAA6B,YAAc,6BAA6B,YAAc,+B,gBCApQD,EAAOC,QAAU,CAAC,IAAM,oBAAoB,cAAgB,gC,kBCD5DD,EAAOC,QAAU,IAA0B,kC,iNCKrCC,EAAU,SAACC,GAAqB,IAC5BC,EAAoBD,EAApBC,UAAWC,EAASF,EAATE,KAEnB,OACE,yBAAKD,UAAWE,IACdC,IAAOC,QACPD,IAAO,YAAD,OAAaF,IACnBD,IAEA,yBAAKK,QAAQ,aACX,4BAAQC,GAAG,KAAKC,GAAG,KAAKC,EAAE,U,gBCJ5BC,EAAS,SAACV,GAAoB,IAEhCW,EASEX,EATFW,QACAV,EAQED,EARFC,UACAW,EAOEZ,EAPFY,MAJ+B,EAW7BZ,EANFa,gBAL+B,SAM/BC,EAKEd,EALFc,KACAC,EAIEf,EAJFe,QAP+B,EAW7Bf,EAHFgB,eAR+B,WAW7BhB,EAFFiB,WAT+B,MASzBN,EATyB,IAW7BX,EADFkB,YAV+B,MAUxB,SAVwB,EAiBjC,OAAO,4BACLjB,UAAWE,IACTC,IAAOe,IACPH,GAAO,UAtBD,MAsBC,aACPJ,GAAK,UAvBC,MAuBD,aAAeA,GACpBD,EAAO,UAxBD,MAwBC,iBAA2B,KAMlCE,GAAYT,IAAOgB,cACnBnB,GAEFiB,KAAMA,EACNG,aAAYJ,EACZH,KAAMA,EACNC,QAASA,GArBY,WACrBA,KAqBAF,SAAUA,GAETF,ICfUW,EA5BO,WACpB,OACE,yBAAKrB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKsB,IAAKC,IAAMvB,UAAU,WAAWgB,IAAI,SACzC,kBAAC,EAAD,CAAQN,QAAQ,QAChB,kBAAC,EAAD,CAAQA,QAAQ,MAAME,UAAQ,IAC9B,kBAAC,EAAD,MACA,kBAAC,EAAD,CAASX,KAAK,OACd,kBAAC,EAAD,CAASA,KAAK,OACd,kBAAC,EAAD,CAASA,KAAK,OACd,kBAAC,EAAD,CAASA,KAAK,OACd,mCACO,6CADP,wBAGA,uBACED,UAAU,WACVwB,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,kBCRYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f3be376e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinner\":\"Spinner_spinner__uHJfD\",\"rotator\":\"Spinner_rotator__1mqWM\",\"dash\":\"Spinner_dash__2oiG9\",\"spinner__lg\":\"Spinner_spinner__lg__2ZCEW\",\"spinner__xs\":\"Spinner_spinner__xs__29EQ5\",\"spinner__sm\":\"Spinner_spinner__sm__aTMVo\",\"spinner__xl\":\"Spinner_spinner__xl__2eLwO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__LRXXn\",\"btn__disabled\":\"Button_btn__disabled__IlTXB\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport classNames from 'classnames';\r\nimport { ISpinner } from \"./Spinner.interfaces\";\r\nimport styles from './Spinner.module.scss';\r\n\r\nconst Spinner = (props: ISpinner) => {\r\n  const { className, size } = props;\r\n\r\n  return (\r\n    <div className={classNames(\r\n      styles.spinner,\r\n      styles[`spinner__${size}`],\r\n      className\r\n    )}>\r\n      <svg viewBox=\"0 0 66 66\">\r\n        <circle cx=\"33\" cy=\"33\" r=\"30\" />\r\n      </svg>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { Spinner };\r\n","import React from 'react';\r\nimport classNames from 'classnames';\r\n// import { prefixClassName } from 'framework/components/ui/_conf';\r\n// import { Icon, Text } from 'ui';\r\nimport { IButton } from './Button.interfaces';\r\n// import './Button.styles.scss';\r\nimport styles from './Button.module.scss';\r\n\r\n// const clx = prefixClassName('btn');\r\nconst clx = 'btn';\r\n\r\nconst Button = (props: IButton) => {\r\n  const {\r\n    caption,\r\n    className,\r\n    color,\r\n    disabled = false,\r\n    form,\r\n    onClick,\r\n    outline = false,\r\n    alt = caption,\r\n    type = 'button'\r\n  } = props;\r\n\r\n  const onClickHandler = () => {\r\n    onClick();\r\n  }\r\n\r\n  return <button\r\n    className={classNames(\r\n      styles.btn,\r\n      outline && `${clx}--outline`,\r\n      color && `${clx}--${color}`,\r\n      caption ? `${clx}--has-caption` : null,\r\n      // icon && [\r\n      //   `${clx}--icon`,\r\n      //   `${clx}--icon--${icon}`,\r\n      //   `${clx}--icon-position-${iconPosition}`\r\n      // ],\r\n      disabled && styles.btn__disabled,\r\n      className\r\n    )}\r\n    type={type}\r\n    aria-label={alt}\r\n    form={form}\r\n    onClick={onClick && onClickHandler}\r\n    disabled={disabled}\r\n  >\r\n    {caption}\r\n  </button>\r\n}\r\n\r\nexport { Button }","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Button, Spinner } from 'components';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Button caption='ABC' />\n        <Button caption='ABC' disabled />\n        <Spinner />\n        <Spinner size='xs' />\n        <Spinner size='sm' />\n        <Spinner size='lg' />\n        <Spinner size='xl' />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}